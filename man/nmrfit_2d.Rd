% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMRFit2D.R
\name{nmrfit_2d}
\alias{nmrfit_2d}
\title{Generate an NMRFit2D object}
\usage{
nmrfit_2d(
  species,
  nmrdata,
  baseline.order = nmroptions$baseline$order,
  n.knots = nmroptions$baseline$n.knots,
  phase.order = nmroptions$phase$order,
  delay.fit = FALSE,
  direct.sf = nmroptions$direct$sf,
  indirect.sf = nmroptions$indirect$sf,
  init = nmroptions$fit$init,
  opts = nmroptions$fit$opts,
  ...
)
}
\arguments{
\item{species}{A list of NMRSpecies2D objects or other objects that can be
converted to NMRSpecies2D objects. See ?nmrresonance_2d and
?nmrspecies_2d for more details about this conversion. If list
elements are named, these names will be use to replace
species ids.}

\item{nmrdata}{An NMRData2D object used to fit the supplied peaks.
automatically generated from the resonance names.}

\item{baseline.order}{An integer specifying the order of the baseline spline
function. Note the the internal B-spline implementation
requires an order of 1 or greater. You can use an order
of -1 to disable baseline correction.}

\item{n.knots}{An integer specifying the number of internal knots to use. The
specific position of these knots can be modified later using
knots() function. To modify initial values of the baseline,
use baseline() function.}

\item{phase.order}{An integer specifying the order of the phase correction
polynomial -- may be 0 or 1 (-1 to disable).}

\item{delay.fit}{FALSE to immediately run least squares optimization after
the NMRFit2D object is initialized, TRUE to skip the
optimization, enabling more customization. The fit can be
run manually using fit().}

\item{direct.sf}{Sweep frequency (MHz) in the direct dimension -- needed to
convert coupling constants from Hz to ppm. In most cases, it
is recommended to set a single default value using
nmroptions$direct$sf  = ..., but an override can be
provided here.}

\item{indirect.sf}{Sweep frequency (MHz) in the indirect dimension -- needed
to convert coupling constants from Hz to ppm. In most
cases, it is recommended to set a single default value
using nmroptions$indirect$sf  = ..., but an override
can be provided here.}

\item{init}{An initialization, function that takes an NMRFit2D object and
returns a modified NMRFit2D object. Use the "identity" function
to override the default initialization in the
nmroptions$fit$init. Note that all arguments provided to the
fit() function are also passed on the init() function.}

\item{opts}{A list of NLOPT fit options to override the default options in
the nmroptions$fit$opts.}

\item{...}{Options passed to nmrspecies_2d if conversion has to be performed.
See ?nmrspecies_2d for more details.}
}
\value{
An NMRFit2D object.
}
\description{
Generates an NMRFit2D object based on a list of NMRSpecies2D objects or
other objects that can be converted to NMRSpecies2D objects. See
?nmrresonance_2d and ?nmrspecies_2d for more details about this conversion.
Apart from providing peak definitions (via species argument) and data (via
nmrdata argument), the main fit decisions are related to baseline and phase
correction, as well as how to deal with peaks that are defined outside the
range of the data. This latter decision is broken down into two arguments:
exclusion.level and exclusion.notification. The exclusion.level parameter
determines which part of the overall species to exclude if any of its peaks
fall outside the data range: either 'species' for whole species, 'resonance'
for just a subset of the species and 'peak' to ignore resonance/species
blocks and exclude by specific peak alone. The exclusion.notification
parameter determines how to report when peaks are found to be outside the
data range: either 'none' to give no notice, 'message' to issue a message,
'warning' to issue a warning, or 'stop' to issue an error.
}
