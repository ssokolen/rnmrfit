{"message":"field is never read: `y_temp`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/files/Dal/Code/rnmrfit_dev/src/rustnmrfit/src/lineshape.rs","byte_start":279,"byte_end":298,"line_start":12,"line_end":12,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    y_temp: Array2<f64>,","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `y_temp`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/files/Dal/Code/rnmrfit_dev/src/rustnmrfit/src/lineshape.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    y_temp: Array2<f64>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"field is never read: `dydp_temp`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/files/Dal/Code/rnmrfit_dev/src/rustnmrfit/src/lineshape.rs","byte_start":304,"byte_end":326,"line_start":13,"line_end":13,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    dydp_temp: Array3<f64>,","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `dydp_temp`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/files/Dal/Code/rnmrfit_dev/src/rustnmrfit/src/lineshape.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    dydp_temp: Array3<f64>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"method is never used: `eval_map`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"/files/Dal/Code/rnmrfit_dev/src/rustnmrfit/src/lineshape.rs","byte_start":2872,"byte_end":3900,"line_start":95,"line_end":122,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub fn eval_map<S,T>(&mut self, x: &ArrayBase<S, Ix1>, x_map: &ArrayBase<T, Ix1>, p: &ArrayBase<S, Ix1>)","highlight_start":5,"highlight_end":109},{"text":"    where S: Data<Elem = f64>, T: Data<Elem = usize> {       ","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // If x values are being mapped, then feed temporary arrays first","highlight_start":1,"highlight_end":74},{"text":"        Lineshape1D::eval_peaks(x, p, &mut self.y_temp, &mut self.dydp_temp);","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let np = p.len();","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // And then map unique values to repeats","highlight_start":1,"highlight_end":49},{"text":"        for i in 0 .. 2 {","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // First, the y values themselves","highlight_start":1,"highlight_end":46},{"text":"            let from: ArrayView<_, Ix1> = self.y_temp.slice(s![i, ..]);   ","highlight_start":1,"highlight_end":75},{"text":"            let to: ArrayViewMut<_, Ix1> = self.y.slice_mut(s![i, ..]);   ","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            Zip::from(to).and(x_map).apply(|x, &i| *x = from[i]);","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // Then, the derivatives","highlight_start":1,"highlight_end":37},{"text":"            for j in 0 .. np {","highlight_start":1,"highlight_end":31},{"text":"                let from: ArrayView<_, Ix1> = self.dydp_temp.slice(s![i, j, ..]);   ","highlight_start":1,"highlight_end":85},{"text":"                let to: ArrayViewMut<_, Ix1> = self.dydp.slice_mut(s![i, j, ..]);   ","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                Zip::from(to).and(x_map).apply(|x, &i| *x = from[i]);","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method is never used: `eval_map`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/files/Dal/Code/rnmrfit_dev/src/rustnmrfit/src/lineshape.rs:95:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn eval_map<S,T>(&mut self, x: &ArrayBase<S, Ix1>, x_map: &ArrayBase<T, Ix1>, p: &ArrayBase<S, Ix1>)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where S: Data<Elem = f64>, T: Data<Elem = usize> {       \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // If x values are being mapped, then feed temporary arrays first\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\n"}
